#!/usr/bin/env python
#-*- coding:utf-8 -*-

'''
Pentestdb, a database for penetration test.
Copyright (c) 2014-2015 alpha1e0
=============================================================
Exploit 模块
'''

import os
import sys
import requests
import time

from orm import Model, StringField, TextField


OS = ['windows','linux','unix','else']
WEBSERVER = ['iis','apache','nginx','lighthttpd','tomcat','jboss','weblogic','websphere','resin','glassfish']
LANGUAGE = ['php','asp','asp.net','java']



class ExploitError(Exception):
    def __init__(self, msg):
        self.msg = msg

    def __str__(self):
        return "Exploit Error, {0}".format(self.msg)



class ExpInfo(Model):
    '''
    维护exploit数据库
    '''
    _table = "expinfo"

    expName = StringField(primarykey=True,ddl="varchar(255)",vrange="1-255")
    expFile = StringField(ddl="vchar(255)",vrange="1-255")
    version = StringField(ddl="vchar(100)",vrange="1-100")
    author = StringField(ddl="vchar(100)",vrange="1-100")
    createDate = StringField(ddl="date")
    vulDate = StringField(ddl="date")
    vulType = StringField(ddl="vchar(100)",vrange="1-100")
    os = StringField(ddl="vchar(100)",vrange="1-100")
    webserver = StringField(ddl="vchar(255)",vrange="1-255")
    language = StringField(ddl="vchar(100)",vrange="1-100")
    appName = StringField(ddl="vchar(255)",vrange="1-255")
    appVersion = StringField(ddl="vchar(100)",vrange="1-100")
    reference = StringField(ddl="vchar(2048)",vrange="1-2048")
    description = TextField(ddl="text")


    def __eq__(self, other):
        if not isinstance(other,Project):
            raise ModelError("the right instance is not Project")

        return self.getVal('expName') == other.getVal('expName')



class Exploit(object):
    '''
    Exploit基类
    Input:
        url: 目标url
        headers: http headers, 字典类型
        ext: 其他参数, 字典类型
    '''
    info = dict()
    def __init__(self, url=None, headers=None, ext=None):
        self.url = url
        self.headers = headers
        self.ext = ext

        self.http = requests
        self.result = dict()

        self.register()


    def verify(self):
        pass


    def attack(self):
        pass


    def output(self):
        '''
        result：[
            {  name: 'DBInfo'，        value：'数据库内容' }，
                {  name: 'Username'，      value: '管理员用户名'},
                {  name: 'Password'，      value：'管理员密码' }，
                {  name: 'Salt'，          value: '加密盐值'},
                {  name: 'Uid'，           value: '用户ID'},
                {  name: 'Groupid'，       value: '用户组ID'},

            {  name: 'ShellInfo'，     value: 'Webshell信息'},
                {  name: 'URL'，           value: 'Webshell地址'},
                {  name: 'Content'，       value: 'Webshell内容'},

            {  name: 'FileInfo'，      value: '文件信息'},
                {  name: 'Filename'，      value: '文件名称'},
                {  name: 'Content'，       value: '文件内容'},

            {  name: 'XSSInfo'，       value: '跨站脚本信息'},
                {  name: 'URL'，           value: '验证URL'},
                {  name: 'Payload'，       value: '验证Payload'},

            {  name: 'AdminInfo'，     value: '管理员信息'},
                {  name: 'Uid'，           value: '管理员ID'},
                {  name: 'Username'，      value: '管理员用户名'},
                {  name: 'Password'，      value: '管理员密码'},

            {  name: 'Database'，      value：'数据库信息' }，
                {  name: 'Hostname'，      value: '数据库主机名'},
                {  name: 'Username'，      value：'数据库用户名' }，
                {  name: 'Password'，      value: '数据库密码'},
                {  name: 'DBname'，        value: '数据库名'},

            {  name: 'VerifyInfo'，    value: '验证信息'},
                {  name: 'URL'，           value: '验证URL'},
                {  name: 'Postdata'，      value: '验证POST数据'},
                {  name: 'Path'，          value: '网站绝对路径'},

            {  name: 'SiteAttr'，      value: '网站服务器信息'},
            {  name: 'Process'，       value: '服务器进程'}

        ]

        '''
        resultStr = ""
        for key,value in self.result.iteritems():
            for vkey,vvalue in value:
                resultStr = resultStr + key + ": " + vkey + ": " + vvalue + "\n"

        return resultStr


    def register(self):
        if not self.info:
            raise ExploitError("missing exploit information")

        if ExpInfo.get(self.info['expName']):
            return True
        else:
            self.info['createDate'] = time.strftime("%Y-%m-%d")
            expFile = os.path.split(__file__)[-1]
            expFile = expFile.endswith(".pyc") and expFile[:-1] or expFile
            self.info['expFile'] = expFile

            ExpInfo.insert(**self.info)


    def update(self):
        if not self.info:
            raise ExploitError("missing exploit information")

        if ExpInfo.get(self.info['expName']):
            User.where(id=100).update(name='bb',ip='2.2.2.2')
            ExpInfo.where(expName=self.info['expName']).update(**self.info)
        else:
            ExpInfo.insert(**self.info)


