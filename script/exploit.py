#!/usr/bin/env python
#-*- coding:utf-8 -*-

'''
Pentestdb, a database for penetration test.
Copyright (c) 2014-2015 alpha1e0
=============================================================
Exploit 模块
'''

import os
import sys
import re
import time
import inspect
import importlib
import urlparse
import urllib

import requests

from orm import Model, StringField, TextField
from commons import Output


OS = ['windows','linux','unix','else']
WEBSERVER = ['iis','apache','nginx','lighthttpd','tomcat','jboss','weblogic','websphere','resin','glassfish']
LANGUAGE = ['php','asp','asp.net','java']


class ExploitError(Exception):
    def __init__(self, msg):
        self.msg = msg

    def __str__(self):
        return "Exploit Error, {0}".format(self.msg)


def loadExpClass(expFile):
    expFile = os.path.join(sys.path[0], "exploit", os.path.split(expFile)[-1])
    if not os.path.exists(expFile):
        raise ExploitError(u"找不到exploit文件'{0}'".format(expFile))

    fileName = os.path.split(expFile)[-1]
    fileName = fileName.endswith(".pyc") and fileName[:-4] or fileName.endswith(".py") and fileName[:-3] or fileName
    expModuleName = ".".join(['exploit', fileName])

    module = importlib.import_module(expModuleName)

    for member in dir(module):
        expClass = getattr(module, member)
        if inspect.isclass(expClass):
            if issubclass(expClass, Exploit) and expClass.__name__ != 'Exploit':
                break
    else:
        raise ExploitError(u"'{0}'中找不到exploit定义".format(expFile))

    return expClass


class ExpInfo(Model):
    '''
    维护exploit数据库
    '''
    _table = "expinfo"

    expName = StringField(primarykey=True,ddl="varchar(255)",notnull=True,vrange="1-255")
    expFile = StringField(ddl="vchar(255)",notnull=True,vrange="1-255")
    version = StringField(ddl="vchar(100)",vrange="1-100")
    author = StringField(ddl="vchar(100)",vrange="1-100")
    createDate = StringField(ddl="date")
    vulDate = StringField(ddl="date")
    vulType = StringField(ddl="vchar(100)",vrange="1-100")
    os = StringField(ddl="vchar(100)",vrange="1-100")
    webserver = StringField(ddl="vchar(255)",vrange="1-255")
    language = StringField(ddl="vchar(100)",vrange="1-100")
    appName = StringField(ddl="vchar(255)",vrange="1-255")
    appVersion = StringField(ddl="vchar(100)",vrange="1-100")
    reference = StringField(ddl="vchar(2048)",vrange="1-2048")
    description = TextField(ddl="text")


    def __eq__(self, other):
        if not isinstance(other,Project):
            raise ModelError("the right instance is not Project")

        return self.getVal('expName') == other.getVal('expName')


class Result(dict):
    '''
    Result保存exploit输出信息，格式如下：
    Result：[
        {  name: 'FailedInfo',    value: '失败具体信息'},
            {  name: 'reason',           value: '失败原因'},

        {  name: 'VerifyInfo',    value: '验证信息'},
            {  name: 'URL',           value: '验证URL'},
            {  name: 'Postdata',      value: '验证POST数据'},
            {  name: 'Path',          value: '网站绝对路径'},
            {  name: 'Payload',       value: '验证payload'},

        {  name: 'DBInfo',        value：'数据库内容' },
            {  name: 'Target',      value: '目的地址'},
            {  name: 'Username',      value: '管理员用户名'},
            {  name: 'Password',      value：'管理员密码' },
            {  name: 'Salt',          value: '加密盐值'},
            {  name: 'Uid',           value: '用户ID'},
            {  name: 'Groupid',       value: '用户组ID'},

        {  name: 'ShellInfo',     value: 'Webshell信息'},
            {  name: 'Target',      value: '目的地址'},
            {  name: 'URL',           value: 'Webshell地址'},
            {  name: 'Content',       value: 'Webshell内容'},

        {  name: 'FileInfo',      value: '文件信息'},
            {  name: 'Target',      value: '目的地址'},
            {  name: 'Filename',      value: '文件名称'},
            {  name: 'Content',       value: '文件内容'},

        {  name: 'XSSInfo',       value: '跨站脚本信息'},
            {  name: 'Target',      value: '目的地址'},
            {  name: 'URL',           value: '验证URL'},
            {  name: 'Payload',       value: '验证Payload'},

        {  name: 'AdminInfo',     value: '管理员信息'},
            {  name: 'Target',      value: '目的地址'},
            {  name: 'Uid',           value: '管理员ID'},
            {  name: 'Username',      value: '管理员用户名'},
            {  name: 'Password',      value: '管理员密码'},

        {  name: 'Database',      value：'数据库信息' },
            {  name: 'Target',      value: '目的地址'},
            {  name: 'Hostname',      value: '数据库主机名'},
            {  name: 'Username',      value：'数据库用户名' },
            {  name: 'Password',      value: '数据库密码'},
            {  name: 'DBname',        value: '数据库名'},

        {  name: 'Else',      value：'其他信息' },
            {  name: 'Target',      value: '目的地址'},
            {  name: 'Info',        value: '其他信息'},

        {  name: 'SiteAttr',      value: '网站服务器信息'},
        {  name: 'Process',       value: '服务器进程'}

    ]
    '''
    def __str__(self):
        resultStr = ""
        if self.get("FailedInfo", None):
            resultStr = Output.G(u"Exploit执行失败，原因：{0}".format(self['FailedInfo']['reason']).encode(sys.stdout.encoding))
            return resultStr

        for key,value in self.iteritems():
            for vkey,vvalue in value.iteritems():
                resultStr = resultStr + Output.R(key + ": ") + Output.Y(vkey + ": ") + vvalue + "\n"

        if not resultStr:
            resultStr = Output.G(u"Exploit执行失败, 目标系统可能不存在漏洞".encode(sys.stdout.encoding))
            return resultStr

        return Output.G(u"目标系统存在漏洞，验证/利用成功，具体信息:\n".encode(sys.stdout.encoding)) + resultStr.strip()


class Exploit(object):
    '''
    Exploit基类
    Input:
        url: 目标url
        headers: http headers, 字典类型
        elseArgs: 其他参数, 字典类型
    '''
    def __init__(self, url="", headers={}, elseArgs={}):
        self.url = url.strip()
        self.host, self.baseURL, self.params = self.urlFormat()
        self.headers = headers
        self.elseArgs = elseArgs

        self.http = requests

        self.register()


    def verify(self):
        return []


    def attack(self):
        return []


    def register(self):
        expInfo = dict()
        for key in self.__class__.__dict__:
            if key in ExpInfo._mapping:
                expInfo[key] = self.__class__.__dict__[key]

        if ExpInfo.get(expInfo['expName']):
            return True
        else:
            expInfo['createDate'] = time.strftime("%Y-%m-%d")
            expInfo['expFile'] = self.__module__.split(".")[-1] + ".py"

            ExpInfo.insert(**expInfo)


    def update(self):
        expInfo = dict()
        for key in self.__class__.__dict__:
            if key in ExpInfo._mapping:
                expInfo[key] = self.__class__.__dict__[key]

        if ExpInfo.get(expInfo['expName']):
            ExpInfo.where(expName=expInfo['expName']).update(**expInfo)
        else:
            ExpInfo.insert(**expInfo)


    def urlFormat(self):
        splited = urlparse.urlparse(self.url)
        host = splited[0] + "://" + splited[1]
        baseURL = host + splited[2]
        params = dict()
        for param in splited[4].split("&"):
            sp = param.split("=")
            try:
                params[sp[0]] = urllib.unquote(sp[1])
            except IndexError:
                params[sp[0]] = ""

        return (host, baseURL, params)



class Payload(object):
    '''
    常用Payload生成
    '''
    def __init__(self, payload=None):
        self.payload = payload


    @classmethod
    def phpWriteFileCode(cls, path, content):
        pass

    @classmethod
    def phpWriteShell(cls, path):
        pass